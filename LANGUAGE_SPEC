# Perl style comments
# Abstracts database/business layers with a single class
class TableName {} # Produces a table called `TableName` and the eqivilent class in php/perl

# Primitive types are
- uint / int     : 32bit unsigned/ signed integers
- bool           : boolean type: 'true' or 'false'
- string         : ASCII string

# Database/class fields are declared like in C: <type> <var_name> (= <value>);
class TableName {
	int    id;
	string username;
	bool   isActive = true;
}

# creates a table:
CREATE TABLE `TableName` (
	id       integer,
	username varchar(255),
	isActive smallint default(1)
);

# and a class (in PHP):
class TableName {
	public $id;
	public $username;
	public $isActive = true;
}

# Classes and variable can also be tagged with attributes with the following syntax:
(<var_name>|<class_name>) (:<attribute_name>('(' <argument_list> ')')?)*
# Attributes must be added in the class/variable declaration, and are only available at compile time
# Variable Attribute:
<type> <var_name> <attributes> ('=' <value>) ';'
int myInt :myAttribute(1, 2, 'foo') :myFlag = 1;

class Foo :primarykey(id) {
	int id :auto_increment;
}

# Attributes are mainly used to signal the different translation phases information
# about that perticular variable or class.

# The default value for a variable using the syntax '= value' is syntactic sugar for :default(value)
