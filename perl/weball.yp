%{
use v5.10;
use Data::Dumper;

use AST::Class;
use AST::FNCall;
use AST::GetMember;
use AST::Assign;
use AST::Ident;

my %classes = ();

my @focus  = ();

sub fpush {
	push @focus, @_
}

sub fpop {
	pop @focus
}

sub f :lvalue {
	$focus[$#focus]
}

%}

%nonassoc '.'
%right '->'
%right '='
#%left '-' '+'
#%left '*' '/'
#%left NEG
#%right '^'


%%

start
	: lines
	|
	;

lines
	: lines outer_line {
		push(@{$_[1]}, $_[2][0]);
		$_[1];
	}
	| outer_line { $_[1]}
	;

outer_line
	: class_def { [$_[1]]}
	;

class_def
	: class_t ident_t {
		fpush(AST::Class->new($_[2]->value));
		
	} attribute_list_o '{' inner_lines_o '}' {
		
		return fpop;
	}
	;

inner_lines_o
	: inner_lines
	| # empty
	;

inner_lines
	: inner_lines inner_line
	| inner_line
	;

inner_line
	: var_decl ';' 
	| dbfunction_decl
	;

dbfunction_decl
	: dbfunction_t ident_t {fpush(AST::Class::DBFunction->new($_[2]->value))}
		'(' fn_decl_arg_list_o ')' attribute_list_o '{' code_inner_lines_o '}'{
			my $dbf = fpop();
			f()->addDBF($dbf);
		}
	;

code_inner_lines_o
	: #empty
	| code_inner_lines
	;

code_inner_lines
	: code_inner_lines code_inner_line {
		f()->addStmt($_[2]);
	}
	| code_inner_line {
		f()->addStmt($_[1]);
	}
	;

code_inner_line
	: var_decl ';' 
	| expr ';'
	;

expr
	: expr '->' expr { AST::GetMember->new(@_[1, 3]) }
	| expr '=' expr  { AST::Assign->new(@_[1, 3])    }
	| fncall
	;

fncall
	: fq_ident {
		fpush(AST::FNCall->new($_[1]))
	} '(' fn_call_arg_list_o ')' {
		fpop
	}
	;
	
var_decl 
	: var_type ident_t {
		fpush(AST::Class::Var->new($_[2]->value, $_[1]))
		} 
		attribute_list_o {
		my $var = fpop();
		f()->addVar($var);
	}
	;

var_type
	: int_t { $_[1]->value }
	| uint_t { $_[1]->value }
	| bool_t { $_[1]->value }
	| string_t { $_[1]->value }
	| double_t { $_[1]->value }
	;

attribute_list_o
	: # null
	| attribute_list
	;

attribute_list
	: attribute_list attribute
	| attribute
	;

attribute
	: ':' ident_t {
			fpush(AST::Class::Attr->new($_[2]->value));
			
		} attribute_arg_list_o {
			my $attr = fpop;
			f()->addAttr($attr);
	}
	;

fn_decl_arg_list_o
	: fn_decl_arg_list
	| # no args
	;

fn_decl_arg_list
	: fn_decl_arg_list ',' fn_decl_arg {
		f()->addArg($_[3]);
	}
	| fn_decl_arg {
		f()->addArg($_[1]);
	}
	;

attribute_arg_list_o 
	: #null
	| '(' ')'
	| '(' arg_list ')'
	;

fn_call_arg_list_o
	: fn_call_arg_list
	| #no args
	;

fn_call_arg_list
	: fn_call_arg_list ',' fn_call_arg {
		f()->addArg($_[3])
	}
	| fn_call_arg {
		f()->addArg($_[1])
	}
	;

fn_call_arg
	: arg
	;

arg_list
	: arg_list ',' arg {
		f()->addArg($_[3]);
	}
	| arg {
		f()->addArg($_[1]);
	}
	;

fn_decl_arg
	: var_decl
	;
	
arg
	: fq_ident
	| number_t
	| true_t
	| false_t
	| string_t
	;

fq_ident
	: ident_t { AST::Ident->new($_[1]) }
	| fq_ident '.' ident_t { 
		if (ref $_[1] eq 'ARRAY') {
#			die (Dumper(@_[1,3]));
		#	return [@{$_[1]}->addPart($_[1])];
			return [@{$_[1]}, $_[3]]
		}
		return [@_[1,3]];
		
	}
	
	;
	

%%
