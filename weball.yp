%{
use v5.10;
use Data::Dumper;

use AST::Class;
use AST::Template;

use AST::Template::Node;

use AST::Var;
use AST::Function;
use AST::FNCall;
use AST::GetMember;
use AST::Assign;
use AST::Ident;
use AST::Return;
use AST::Primitive;


use AST::Bool::IsEqual;
use AST::Bool::IsNotEqual;
use AST::Bool::IsGTEqual;
use AST::Bool::IsLTEqual;
use AST::Bool::IsGT;
use AST::Bool::IsLT;

use AST::Math::Add;
use AST::Math::Divide;
use AST::Math::Multiply;
use AST::Math::Subtract;
use AST::Math::Mod;
use AST::Math::Pow;

use AST::Math::SHL;
use AST::Math::SHR;

use AST::Math::And;
use AST::Math::BAnd;
use AST::Math::BNot;
use AST::Math::BOr;
use AST::Math::BXOr;
use AST::Math::Not;
use AST::Math::Or;
use AST::Math::XOr;

use AST::Math::Incr;
use AST::Math::Decr;

use AST::Block;
use AST::Expr;

use AST::Stmt::If;
use AST::Stmt::ElseIf;
use AST::Stmt::While;
use AST::Stmt::For;


sub wrap {
	ref $_[0] eq 'ARRAY' ? $_[0] : [@_];
}


%}

#%left  NAMEDOR
#%left  NAMEDAND
#%right NAMEDNOT
%left ','
%right '=' '+=' '-=' '*=' '/=' '&=' '|=' '%=' '^=' 
%left '||'
%left '&&'
%left '|' '^'
%left '&'
%nonassoc '==' '!=' 
%nonassoc '<' '>' '<=' '>='
#%nonassoc NAMED_UNARY
%left '<<' '>>'
%left '-' '+'
%left '*' '/' '%'
%left '.'
%right '!' '~' NEG
%right '**' # POW operator
%nonassoc '++' '--'
%left '->'


%%

start
	: lines
	|
	;

lines
	: lines outer_line 
		{ push(@{$_[1]}, ($_[2])); $_[1]; }
	| outer_line 
		{ wrap($_[1]) }
	;

outer_line
	: class_def 
		{ ($_[1]) }
	| function_decl
		{ ($_[1]) }
	| template_decl
		{ ($_[1]) }
	;

class_def
	: class_t ident_t attribute_list_o '{' inner_lines_o '}' 
		{ AST::Class->new(AST::Ident->new($_[2]), @_[3, 5]) }
	;

inner_lines_o
	: inner_lines 
		{ wrap($_[1]) }
	| # empty
	;

inner_lines
	: inner_lines inner_line 
		{ push @{$_[1]}, $_[2]; $_[1]; }
	| inner_line
		{ wrap($_[1]) }
	;

inner_line
	: var_decl ';' 
	| function_decl
	;

template_decl
	: template_t ident_t attribute_list_o '{' template_nodes_o '}'
		{ AST::Template->new(AST::Ident->new($_[2]), @_[3, 5]) }
	;

function_decl
	: function_t ident_t '(' fn_decl_arg_list_o ')' attribute_list_o '{' code_inner_lines_o '}'
		{ AST::Function->new(AST::Ident->new($_[2]), @_[4, 6, 8]); }
	;

template_nodes_o
	: # null
	| template_nodes
		{ wrap ($_[1]) }
	;
	
template_nodes
	: template_nodes template_node
		{ push @{$_[1]}, $_[2]; $_[1]; }
	| template_node
		{ wrap($_[1]) }
	;

template_node
	: ident_t attribute_list_o '{' template_nodes_o '}'
		{ AST::Template::Node->new(AST::Ident->new($_[1]), @_[2, 4]) }
	| arg 
		{ wrap($_[1]) }
	| fncall
		{ wrap($_[1]) }
	;

code_inner_lines_o
	: #empty
	| code_inner_lines 
		{ wrap($_[1]) }
	;

code_inner_lines
	: code_inner_lines code_inner_line 
		{ push @{$_[1]}, ($_[2]); $_[1]; }
	| code_inner_line 
		{ wrap($_[1]) }
	;

code_inner_line
	: var_decl ';' 
	| expr ';'
	| return_t expr ';' 
		{ AST::Return->new($_[2]) }
	| stmt
	;
	
stmt
	: if_stmt
	| while_stmt
	| for_stmt
	;

for_stmt
	: for_t '(' for_stmt_var_decl_o ';' for_expr_o ';' for_expr_o ')' '{' code_inner_lines_o '}'
		{ AST::Stmt::For->new(@_[3, 5, 7, 10]); }
	;

for_expr_o
	: #null
	| expr
	;
for_stmt_var_decl_o
	: #null
	| var_decl { wrap($_[1]); }
	;

while_stmt
	: while_t '(' expr ')' '{' code_inner_lines_o '}'
		{ AST::Stmt::While->new(@_[3, 6]); }
	;

if_stmt
	: if_t '(' expr ')' '{' code_inner_lines_o '}' elseif_t_o else_t_o 
		{ AST::Stmt::If->new(@_[3, 6, 8, 9]); }
	;

elseif_t_o
	: #null
	| elseif_list { wrap($_[1]) }
	;

elseif_list
	: elseif_list elseif_stmt 
		{ push @{$_[1]}, ($_[2]); $_[1]; }
	| elseif_stmt { wrap($_[1]) }
	;

elseif_stmt
	: elseif_t '(' expr ')' '{' code_inner_lines_o '}' 
		{ AST::Stmt::ElseIf->new(@_[3, 6]); }
	;

else_t_o
	: #null
	| else_stmt 
		{ wrap($_[1]) }
	;

else_stmt
	: else_t '{' code_inner_lines_o '}' 
		{ ($_[3]); }
	;

expr
	: expr '->' expr 
		{ AST::GetMember->new(@_[1, 3]) }
	| binexpr
	| fncall
	| '(' expr ')'   
		{ $_[2] }
	| arg
	| '!' expr
		{ AST::Math::Not->new($_[2]);}
	| '~' expr 
		{ AST::Math::BNot->new($_[2]);}
	| '++' expr
		{ AST::Math::Incr->new(1, $_[2]); }
	| '--' expr
		{ AST::Math::Decr->new(1, $_[2]); }
	| expr '++'
		{ AST::Math::Incr->new(0, $_[1]); }
	| expr '--'
		{ AST::Math::Decr->new(0, $_[1]); }
	| '-' expr %prec NEG
		{
			my $tok = Token->new({}, 'int', '0');
			AST::Math::Subtract->new(
				AST::Primitive->new('number', $tok),
				$_[2]
			);
		
		}
	;

binexpr
	: expr '=' expr 
		{ AST::Assign->new(@_[1, 3])         }
	
	| expr '+' expr  
		{ AST::Math::Add->new(@_[1, 3])      }
	| expr '-' expr  
		{ AST::Math::Subtract->new(@_[1, 3]) }
	| expr '/' expr  
		{ AST::Math::Divide->new(@_[1, 3])   }
	| expr '*' expr  
		{ AST::Math::Multiply->new(@_[1, 3]) }
	| expr '%' expr
		{ AST::Math::Mod->new(@_[1, 3])      }
	
	| expr '**' expr
		{ AST::Math::Pow->new(@_[1, 3])      }
	
	
	| expr '&' expr
		{ AST::Math::BAnd->new(@_[1, 3])     }
	| expr '^' expr
		{ AST::Math::BXOr->new(@_[1, 3])     }
	| expr '|' expr
		{ AST::Math::BOr->new(@_[1, 3])      }
	| expr '>>' expr
		{ AST::Math::SHR->new(@_[1, 3])      }
	| expr '<<' expr
		{ AST::Math::SHL->new(@_[1, 3])      }
		
	
	| expr '&&' expr
		{ AST::Math::And->new(@_[1, 3])      }
	| expr '||' expr
		{ AST::Math::Or->new(@_[1, 3])       }
	
	| expr '+=' expr
		{ AST::Assign->new($_[1], AST::Math::Add->new(@_[1, 3])) }
	| expr '-=' expr
		{ AST::Assign->new($_[1], AST::Math::Subtract->new(@_[1, 3])) }
	| expr '*=' expr
		{ AST::Assign->new($_[1], AST::Math::Multiply->new(@_[1, 3])) }
	| expr '/=' expr
		{ AST::Assign->new($_[1], AST::Math::Divide->new(@_[1, 3])) }
	| expr '%=' expr
		{ AST::Assign->new($_[1], AST::Math::Mod->new(@_[1, 3])) }
		
	
	| expr '&=' expr
		{ AST::Assign->new($_[1], AST::Math::BAnd->new(@_[1, 3])) }
	| expr '^=' expr
		{ AST::Assign->new($_[1], AST::Math::BXOr->new(@_[1, 3])) }
	| expr '|=' expr
		{ AST::Assign->new($_[1], AST::Math::BOr->new(@_[1, 3])) }
	
	
	| expr '==' expr 
		{ AST::Bool::IsEqual->new(@_[1, 3])    }
	| expr '!=' expr 
		{ AST::Bool::IsNotEqual->new(@_[1, 3]) }
	| expr '>=' expr 
		{ AST::Bool::IsGTEqual->new(@_[1, 3])  }
	| expr '<=' expr 
		{ AST::Bool::IsLTEqual->new(@_[1, 3])  }
	| expr '>' expr 
		{ AST::Bool::IsGT->new(@_[1, 3])       }
	| expr '<' expr 
		{ AST::Bool::IsLT->new(@_[1, 3])       }
		
	
	;

fncall
	: fq_ident '(' fn_call_arg_list_o ')' 
		{ AST::FNCall->new(@_[1, 3]); }
	;
	
var_decl 
	: var_type ident_t attribute_list_o var_decl_assign_o 
		{ AST::Var->new($_[1], AST::Ident->new($_[2]), @_[3, 4]); }
	| var_type local_ident_t attribute_list_o  var_decl_assign_o 
		{ AST::Var->new($_[1], AST::Ident->new($_[2]), @_[3, 4]); }
	;

var_type
	: int_t    
		{ $_[1]->value }
	| uint_t   
		{ $_[1]->value }
	| bool_t   
		{ $_[1]->value }
	| string_t 
		{ $_[1]->value }
	| double_t 
		{ $_[1]->value }
	;

attribute_list_o
	: # null
	| attribute_list { wrap($_[1]) }
	;

attribute_list
	: attribute_list attribute { push @{$_[1]}, ($_[2]); $_[1]; }
	| attribute                { [$_[1]] }
	;

attribute
	: ':' ident_t attribute_arg_list_o 
		{ (AST::Attr->new(AST::Ident->new($_[2]), $_[3])) }
	;

fn_decl_arg_list_o
	: fn_decl_arg_list { wrap($_[1]) }
	| # no args
	;

fn_decl_arg_list
	: fn_decl_arg_list ',' fn_decl_arg 
		{ push @{$_[1]}, ($_[3]); $_[1] }
	| fn_decl_arg 
		{ [$_[1]] }
	;

attribute_arg_list_o 
	: #null
	| '(' ')'          
		{ () }
	| '(' arg_list ')' 
		{ wrap($_[2]) }
	;

fn_call_arg_list_o
	: fn_call_arg_list 
		{ wrap($_[1]) }
	| #no args
	;

fn_call_arg_list
	: fn_call_arg_list ',' fn_call_arg 
		{ push @{$_[1]}, ($_[3]); $_[1] }
	| fn_call_arg 
		{ [$_[1]] }
	;

fn_call_arg
	: expr { ($_[1]) }
	;

arg_list
	: arg_list ',' arg 
		{ push @{$_[1]}, ($_[3]); $_[1] }
	| arg              
		{ [$_[1]] }
	;

var_decl_assign_o 
	: #null
	| var_decl_assign
	;

var_decl_assign
	: '=' expr 
		{ 
			my $ident_t = AST::Ident->new(Token->new($_[1], 'ident_t', 'default'));
			return AST::Attr->new($ident_t, wrap($_[2]));
		}
	;

fn_decl_arg
	: var_decl
	;
	
arg
	: fq_ident
	| local_ident_t 
		{ AST::Ident->new($_[1], 1) }
	| number_t      
		{ AST::Primitive->new('int', $_[1]) }
	| true_t        
		{ AST::Primitive->new('bool', $_[1]) }
	| false_t       
		{ AST::Primitive->new('bool', $_[1]) }
	| string_t      
		{ AST::Primitive->new('string', $_[1]) }
	;

fq_ident
	: ident_t { AST::Ident->new($_[1]) }
	| fq_ident '.' ident_t {
		if (ref $_[1] eq 'AST::Ident') {
			return $_[1]->addPart(AST::Ident->new($_[3]));
		}
		else {
			die "Shouldn't get here";
		}
		
	}
	
	;
	

%%
